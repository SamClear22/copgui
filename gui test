// Samuel De Santiago
// COP-3330 - GUI Project
// 11/20/2023

package copProject;

import javax.imageio.ImageIO;
import javax.swing.*;
import copProject.AbstractReward.Reward;
import java.awt.*;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import java.util.List;

interface Drawable {
    void draw(Graphics g, int x, int y, int cellSize);
    void draw(Graphics g, int cellSize);
}

//Abstract class for rewards
abstract class AbstractReward implements Serializable, Drawable {
	  private static final long serialVersionUID = 1L;

	  public AbstractReward.Reward createReward(String rewardType, int x, int y) {
		    switch (rewardType) {
		        case "Coin":
		            return new CoinReward().createReward(x, y);
		        case "Fruit":
		            return new FruitReward().createReward(x, y);
		        case "Candy":
		            return new CandyReward().createReward(x, y);
		        default:
		            throw new IllegalArgumentException("Invalid reward type: " + rewardType);
		    }
	  }


	  // Abstract method to create the reward
	  public Reward createReward(int x, int y) {
	      return createReward(x, y, null);
	  }
	
	  // Abstract method to create the reward
	  protected abstract Reward createReward(int x, int y, String rewardType);
	  
	  // Inner class representing the reward
	  protected class Reward implements Serializable, Drawable {
	      private static final long serialVersionUID = 1L;
	      transient Image image;
	      private int x, y;
	      private String rewardType; // Add rewardType field
	      public boolean isEntrance;
	      public boolean isExit;
	
	      public Reward(Image image, int x, int y, String rewardType) {
	          this.image = image;
	          this.x = x;
	          this.y = y;
	          this.rewardType = rewardType;
	      }
	
	      @Override
	      public void draw(Graphics g, int cellSize) {
	          loadImage(); // Reload the image
	          g.drawImage(image, x * cellSize, y * cellSize, cellSize, cellSize, null);
	      }
	
	      @Override
	      public void draw(Graphics g, int x, int y, int cellSize) {
	          loadImage(); // Reload the image
	          g.drawImage(image, x, y, cellSize, cellSize, null);
	      }
	
	      private void loadImage() {
	    	    if (image == null) {
	    	        String imageIndex = null;
					// Load the image for the wall
	    	        String imageName = "wall_" + imageIndex + ".png";
	    	        String imagePath = "/copProject_images/" + imageName;
	    	        try {
	    	            System.out.println("Loading image from path: " + imagePath); // Print the path for debugging
	    	            image = ImageIO.read(getClass().getResource(imagePath));
	    	        } catch (IOException e) {
	    	            System.err.println("Failed to load image: " + imageName);
	    	            e.printStackTrace();
	    	        }
	    	    }
	    	}
	      
	      public String getType() {
	          return rewardType;
	      }
	  }
}

//Concrete subclass of AbstractReward
class CoinReward extends AbstractReward {
	  private static final long serialVersionUID = 2L;
	
	  public CoinReward() {
	      super();
	  }
	  
	  @Override
	  protected Reward createReward(int x, int y, String rewardType) {
	      try {
	          // Load the image for the coin (replace "coin.png" with your image file)
	          ImageIcon icon = new ImageIcon("coin.png");
	          Image image = icon.getImage();
	          return new Reward(image, x, y, "Coin");
	      } catch (Exception e) {
	          e.printStackTrace();
	          return null;
	      }
	  }
	
	  @Override
	  public void draw(Graphics g, int cellSize) {
	      // Leave it empty, as it relies on the implementation in AbstractReward.Reward
	  }
	
	  // Implement the draw method from the Drawable interface
	  @Override
	  public void draw(Graphics g, int x, int y, int cellSize) {
	      Reward reward = createReward(x, y);
	      reward.draw(g, cellSize);
	  }
}

//Concrete subclass of AbstractReward
class FruitReward extends AbstractReward {
	 private static final long serialVersionUID = 3L;
	
	 public FruitReward() {
	     super();
	 }
	
	 @Override
	 protected Reward createReward(int x, int y, String rewardType) {
	     try {
	         // Load the image for the fruit (replace "fruit.png" with your image file)
	         ImageIcon icon = new ImageIcon("fruit.png");
	         Image image = icon.getImage();
	         return new Reward(image, x, y, "Fruit");
	     } catch (Exception e) {
	         e.printStackTrace();
	         return null;
	     }
	 }
	
	 @Override
	 public void draw(Graphics g, int cellSize) {
	     // Leave it empty, as it relies on the implementation in AbstractReward.Reward
	 }
	
	 // Implement the draw method from the Drawable interface
	 @Override
	 public void draw(Graphics g, int x, int y, int cellSize) {
	     Reward reward = createReward(x, y);
	     reward.draw(g, cellSize);
	 }
}

//Concrete subclass of AbstractReward
class CandyReward extends AbstractReward {
	 private static final long serialVersionUID = 4L;

	 public CandyReward() {
	     super();
	 }

	 @Override
	 protected Reward createReward(int x, int y, String rewardType) {
	     try {
	         // Load the image for the candy (replace "candy.png" with your image file)
	         ImageIcon icon = new ImageIcon("candy.png");
	         Image image = icon.getImage();
	         return new Reward(image, x, y, "Candy");
	     } catch (Exception e) {
	         e.printStackTrace();
	         return null;
	     }
	 }
	
	 @Override
	 public void draw(Graphics g, int cellSize) {
	     // Leave it empty, as it relies on the implementation in AbstractReward.Reward
	 }
	
	 // Implement the draw method from the Drawable interface
	 @Override
	 public void draw(Graphics g, int x, int y, int cellSize) {
	     Reward reward = createReward(x, y);
	     reward.draw(g, cellSize);
	 }
}

class Wall implements Drawable {
    private transient Image image;
    private int x, y;
    private int imageIndex; // Added imageIndex field

    public Wall(int x, int y, int imageIndex) {
        this.x = x;
        this.y = y;
        this.imageIndex = imageIndex;
        loadImage(); // Call loadImage to ensure the image is loaded
    }

    @Override
    public void draw(Graphics g, int cellSize) {
        // Draw the wall image at the specified position
        g.drawImage(image, x * cellSize, y * cellSize, cellSize, cellSize, null);
    }

    private void loadImage() {
        // Load the image based on the imageIndex
        String imageName = "wall_" + imageIndex + ".png";
        String imagePath = "/copProject_images/" + imageName;
        try {
            // Print the path for debugging
            System.out.println("Loading image from path: " + imagePath);
            image = ImageIO.read(getClass().getResource(imagePath));
        } catch (IOException e) {
            System.err.println("Failed to load image: " + imageName);
            e.printStackTrace();
        }
    }

    // Add getters for x and y
    public int getX() {
        return x;
    }

    public int getY() {
        return y;
    }

    @Override
    public void draw(Graphics g, int x, int y, int cellSize) {
        // TODO Auto-generated method stub
    }
}


public class BoardGameGUI extends JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private BoardPanel boardPanel;
    private Map<String, ImageIcon> rewardImages;
    
    public BoardGameGUI() {
        initUI();
        loadRewardImages(); // Load reward images when initializing the GUI
    }

    private void initUI() {
        setTitle("Board Game GUI");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLayout(new BorderLayout());

        // Create the board panel
        boardPanel = new BoardPanel();	
        add(boardPanel, BorderLayout.CENTER);

        // Create a menu bar with options
        JMenuBar menuBar = new JMenuBar();
        JMenu menu = new JMenu("Menu");
        JMenuItem designItem = new JMenuItem("Design");
        JMenuItem loadItem = new JMenuItem("Load");
        JMenuItem saveItem = new JMenuItem("Save");

        designItem.addActionListener(e -> generateNewBoard());
        loadItem.addActionListener(e -> loadBoardFromFile());
        saveItem.addActionListener(e -> saveBoardToFile());

        menu.add(designItem);
        menu.add(loadItem);
        menu.add(saveItem);
        menuBar.add(menu);

        setJMenuBar(menuBar);

        // Set frame properties
        setSize(800, 800);
        setLocationRelativeTo(null);
        setVisible(true);  
    }

    private void loadRewardImages() {
        // Load images for rewards
        rewardImages = new HashMap<>();
        rewardImages.put("Coin", new ImageIcon("coin.png")); // Replace "coin.png" with your image file
        rewardImages.put("Fruit", new ImageIcon("fruit.png")); // Replace "food.png" with your image file
        rewardImages.put("Candy", new ImageIcon("candy.png")); // Replace "plant.png" with your image file
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(BoardGameGUI::new);
    }    		
    
    public class BoardPanel extends JPanel {
        /**
		 * 
		 */
    	
		private static final long serialVersionUID = 1L;
		private static final int CELL_SIZE = 20;
		private static final int BOARD_SIZE = 34; // Increase the size to 33x33
        private static final Color BORDER_CELL_COLOR = new Color(50, 50, 50); // Darker gray
        
        private Random random = new Random();
        private Set<Point> occupiedCells = new HashSet<>();
        private Map<Point, AbstractReward.Reward> rewards = new HashMap<>();
        private List<Wall> walls = new ArrayList<>();
        private Point entranceLocation;
        private Point exitLocation;
       
        public void generateRandomRewards() {
            // Define specific locations for walls
            List<Point> wallLocationsType1 = Arrays.asList(
            		new Point(3, 8), new Point(3, 15), new Point(3, 21), new Point(3, 27),
            	    new Point(5, 8), new Point(5, 15), new Point(5, 21), new Point(5, 27),
            	    new Point(7, 8), new Point(7, 15), new Point(7, 21), new Point(7, 27),
            	    new Point(9, 8), new Point(9, 15), new Point(9, 21), new Point(9, 27),
            	    new Point(6, 8), new Point(8, 15), new Point(10, 21), new Point(12, 27),
            	    new Point(11, 8), new Point(11, 15), new Point(11, 21), new Point(11, 27),
            	    new Point(13, 8), new Point(13, 15), new Point(13, 21), new Point(13, 27),
            	    new Point(15, 8), new Point(15, 15), new Point(15, 21), new Point(15, 27),
            	    new Point(17, 8), new Point(17, 15), new Point(17, 21), new Point(17, 27),
            	    new Point(19, 8), new Point(19, 15), new Point(19, 21), new Point(19, 27),
            	    new Point(21, 8), new Point(21, 15), new Point(21, 21), new Point(21, 27),
            	    new Point(23, 8), new Point(23, 15), new Point(23, 21), new Point(23, 27),
            	    new Point(25, 8), new Point(25, 15), new Point(25, 21), new Point(25, 27),
            	    new Point(27, 8), new Point(27, 15), new Point(27, 21), new Point(27, 27),
            	    new Point(29, 8), new Point(29, 15), new Point(29, 21), new Point(29, 27),
            	    new Point(14, 8), new Point(16, 15), new Point(18, 21), new Point(20, 27),
            	    new Point(22, 8), new Point(24, 15), new Point(26, 21), new Point(28, 27),
            	    new Point(30, 8), new Point(30, 15), new Point(31, 21), new Point(31, 27),
            	    new Point(30, 5), new Point(30, 11), new Point(30, 17), new Point(30, 23), new Point(30, 29),
            	    new Point(31, 3), new Point(30, 13), new Point(28, 19), new Point(26, 25), new Point(24, 31),
            	    new Point(18, 31), new Point(16, 31), new Point(14, 27), new Point(12, 21), new Point(10, 15)
            );

            List<Point> wallLocationsType2 = Arrays.asList(
            		// Previous points remain unchanged
            	    new Point(2, 7), new Point(2, 14), new Point(2, 20), new Point(2, 26),
            	    new Point(4, 7), new Point(4, 14), new Point(4, 20), new Point(4, 26),
            	    new Point(6, 7), new Point(6, 14), new Point(6, 20), new Point(6, 26),
            	    new Point(8, 7), new Point(8, 14), new Point(8, 20), new Point(8, 26),
            	    new Point(5, 7), new Point(7, 14), new Point(9, 20), new Point(11, 26),
            	    new Point(10, 7), new Point(10, 14), new Point(10, 20), new Point(10, 26),
            	    new Point(12, 7), new Point(12, 14), new Point(12, 20), new Point(12, 26),
            	    new Point(14, 7), new Point(14, 14), new Point(14, 20), new Point(14, 26),
            	    new Point(16, 7), new Point(16, 14), new Point(16, 20), new Point(16, 26),
            	    new Point(18, 7), new Point(18, 14), new Point(18, 20), new Point(18, 26),
            	    new Point(20, 7), new Point(20, 14), new Point(20, 20), new Point(20, 26),
            	    new Point(22, 7), new Point(22, 14), new Point(22, 20), new Point(22, 26),
            	    new Point(24, 7), new Point(24, 14), new Point(24, 20), new Point(24, 26),
            	    new Point(26, 7), new Point(26, 14), new Point(26, 20), new Point(26, 26),
            	    new Point(28, 7), new Point(28, 14), new Point(28, 20), new Point(28, 26),
            	    new Point(30, 7), new Point(30, 14), new Point(30, 20), new Point(30, 26),
            	    new Point(13, 7), new Point(15, 14), new Point(17, 20), new Point(19, 26),
            	    new Point(21, 7), new Point(23, 14), new Point(25, 20), new Point(27, 26),
            	    new Point(29, 7), new Point(31, 14), new Point(31, 20), new Point(31, 26),
            	    new Point(31, 4), new Point(31, 10), new Point(31, 16), new Point(31, 22), new Point(29, 2),
            	    new Point(31, 5), new Point(29, 12), new Point(27, 18), new Point(25, 24), new Point(23, 39)
            );

            List<Point> wallLocationsType3 = Arrays.asList(
            		new Point(1, 5), new Point(1, 12), new Point(1, 18), new Point(1, 24), new Point(1, 29),
                    new Point(3, 5), new Point(3, 12), new Point(3, 18), new Point(3, 24), new Point(3, 30),
                    new Point(5, 5), new Point(5, 12), new Point(5, 18), new Point(5, 24), new Point(5, 30),
                    new Point(7, 5), new Point(7, 12), new Point(7, 18), new Point(7, 24), new Point(7, 30),
                    new Point(9, 5), new Point(9, 12), new Point(9, 18), new Point(9, 24), new Point(9, 30),
                    new Point(11, 5), new Point(11, 12), new Point(11, 18), new Point(11, 24), new Point(11, 30),
                    new Point(13, 5), new Point(13, 12), new Point(13, 18), new Point(13, 24), new Point(13, 30),
                    new Point(15, 5), new Point(15, 12), new Point(15, 18), new Point(15, 24), new Point(15, 30),
                    new Point(17, 5), new Point(17, 12), new Point(17, 18), new Point(17, 24), new Point(17, 30),
                    new Point(19, 5), new Point(19, 12), new Point(19, 18), new Point(19, 24), new Point(19, 30),
                    new Point(21, 5), new Point(21, 12), new Point(21, 18), new Point(21, 24), new Point(21, 30),
                    new Point(23, 5), new Point(23, 12), new Point(23, 18), new Point(23, 24), new Point(23, 30),
                    new Point(25, 5), new Point(25, 12), new Point(25, 18), new Point(25, 24), new Point(25, 30),
                    new Point(27, 5), new Point(27, 12), new Point(27, 18), new Point(27, 24), new Point(27, 30),
                    new Point(29, 5), new Point(29, 12), new Point(29, 18), new Point(29, 24), new Point(29, 30),
                    new Point(31, 5), new Point(31, 12), new Point(31, 18), new Point(31, 24), new Point(31, 29),
                    new Point(2, 7), new Point(2, 14), new Point(2, 20), new Point(2, 26),
                    new Point(4, 7), new Point(4, 14), new Point(4, 20)
            );

            generateWallsAtLocations(wallLocationsType1, 1);
            generateWallsAtLocations(wallLocationsType2, 2);
            generateWallsAtLocations(wallLocationsType3, 3);
            
            generateRandomRewardsOfType(new CoinReward(), 16, wallLocationsType1);
            generateRandomRewardsOfType(new FruitReward(), 16, wallLocationsType2);
            generateRandomRewardsOfType(new CandyReward(), 16, wallLocationsType3);
            
            generateEntranceExitLocations();
        }

        private void generateRandomRewardsOfType(AbstractReward rewardType, int count, List<Point> wallLocations) {
            for (int i = 0; i < count; i++) {
                int row, col;
                do {
                    row = random.nextInt(BOARD_SIZE - 2) + 1; // Exclude the border
                    col = random.nextInt(BOARD_SIZE - 2) + 1; // Exclude the border
                } while (isCellOccupied(row, col) || isCornerCell(row, col) || isWallInCell(row, col) || wallLocations.contains(new Point(row, col)));

                AbstractReward.Reward reward = rewardType.createReward(col, row, null);
                rewards.put(new Point(row, col), reward);
                occupiedCells.add(new Point(row, col));
            }
        }
        
        private void generateWallsAtLocations(List<Point> wallLocations, int wallIndex) {
            // Add walls at specified locations without clearing existing walls
            for (Point location : wallLocations) {
                Wall wall = new Wall(location.x, location.y, wallIndex);
                walls.add(wall);
                occupiedCells.add(location);
            }

            // Repaint the board
            repaint();
        }

        private class Wall implements Drawable {
            private transient Image image;
            private int x, y;
            private int imageIndex; // Added imageIndex field

            public Wall(int x, int y, int imageIndex) {
                this.x = x;
                this.y = y;
                this.imageIndex = imageIndex;
                loadImage();
            }

            @Override
            public void draw(Graphics g, int cellSize) {
                // Draw the wall image at the specified position
                g.drawImage(image, x * cellSize, y * cellSize, cellSize, cellSize, null);
            }

            private void loadImage() {
                // Load the image based on the imageIndex
                String imageName = "wall_" + imageIndex + ".png";
                String imagePath = "copProject_images/" + imageName;
                try {
                    // Print the path for debugging
                    System.out.println("Loading image from path: " + imagePath);
                    image = ImageIO.read(getClass().getResource(imagePath));

                    // Check if the image is loaded successfully
                    if (image == null) {
                        System.err.println("Failed to load image: " + imageName);
                        // Handle the failure, e.g., use a default image
                    }
                } catch (IOException e) {
                    System.err.println("Failed to load image: " + imageName);
                    e.printStackTrace();
                }
            }

			@Override
			public void draw(Graphics g, int x, int y, int cellSize) {
				// TODO Auto-generated method stub
				
			}

			public int getX() {
				// TODO Auto-generated method stub
				return 0;
			}

			public int getY() {
				// TODO Auto-generated method stub
				return 0;
			}
        }
        
        public void clearBoard() {
            occupiedCells.clear(); // Clear occupied cells
            rewards.clear(); // Clear rewards
        }
        
        // Update the paintComponent method in the BoardPanel class
        @Override
        protected void paintComponent(Graphics g) {
            super.paintComponent(g);

            // Draw the board with a dark grey border and light grey inside cells
            for (int row = 0; row < BOARD_SIZE; row++) {
                for (int col = 0; col < BOARD_SIZE; col++) {
                    if (row == 0 || row == BOARD_SIZE - 1 || col == 0 || col == BOARD_SIZE - 1) {
                        // Dark grey border
                        g.setColor(BORDER_CELL_COLOR);
                        g.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    } else if ((row == 1 || row == BOARD_SIZE - 2) && (col == 1 || col == BOARD_SIZE - 2)) {
                        // Inside corners of the 34x34 grid
                        g.setColor(Color.WHITE); // Change to white
                        g.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    } else {
                        // Light grey inside cells
                        g.setColor(new Color(211, 211, 211)); // Light grey
                        g.fillRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                    }
                    g.setColor(Color.BLACK); // Set the color for the grid lines
                    g.drawRect(col * CELL_SIZE, row * CELL_SIZE, CELL_SIZE, CELL_SIZE);
                }
            }

            for (Map.Entry<Point, AbstractReward.Reward> entry : rewards.entrySet()) {
                AbstractReward.Reward reward = entry.getValue();
                if (reward != null) {
                    reward.draw(g, CELL_SIZE);
                }
            }

            for (Wall wall : walls) {
                wall.draw(g, CELL_SIZE);
            }

            drawEntranceExitImages(g);
            drawImage(g, entranceLocation, "entrance.png");
            drawImage(g, exitLocation, "exit.png");
        }

        private void drawImage(Graphics g, Point location, String imageName) {
            if (location != null) {
                try {
                    Image image = ImageIO.read(getClass().getResource("/copProject_images/" + imageName));
                    g.drawImage(image, location.x * CELL_SIZE, location.y * CELL_SIZE, CELL_SIZE, CELL_SIZE, this);
                } catch (IOException e) {
                    System.err.println("Failed to load image: " + imageName);
                    e.printStackTrace();
                }
            }
        }
        
        private void drawEntranceExitImages(Graphics g) {
            drawImage(g, entranceLocation, "entrance.png");
            drawImage(g, exitLocation, "exit.png");
        }
        
        private boolean isWallInCell(int row, int col) {
            for (Wall wall : walls) {
                if (wall.getX() == col && wall.getY() == row) {
                    return true;
                }
            }
            return false;
        }

        private boolean isCornerCell(int row, int col) {
            // Check if the cell is one of the blue corners inside the 32x32 grid
            return (row == 1 && col == 1) ||            // Top-left corner
                   (row == 1 && col == BOARD_SIZE - 2) || // Top-right corner
                   (row == BOARD_SIZE - 2 && col == 1) || // Bottom-left corner
                   (row == BOARD_SIZE - 2 && col == BOARD_SIZE - 2); // Bottom-right corner
        }
        
        private void generateEntranceExitLocations() {
            List<Point> cornerLocations = Arrays.asList(
                    new Point(1, 1),                  // Top-left corner inside the 32x32 grid
                    new Point(1, BOARD_SIZE - 2),    // Top-right corner inside the 32x32 grid
                    new Point(BOARD_SIZE - 2, 1),    // Bottom-left corner inside the 32x32 grid
                    new Point(BOARD_SIZE - 2, BOARD_SIZE - 2) // Bottom-right corner inside the 32x32 grid
            );

            Collections.shuffle(cornerLocations); // Randomize the order

            entranceLocation = cornerLocations.get(0);
            exitLocation = cornerLocations.get(1);

            // Set isEntrance and isExit for the corresponding loaded rewards
            for (Map.Entry<Point, AbstractReward.Reward> entry : rewards.entrySet()) {
                Point position = entry.getKey();
                AbstractReward.Reward reward = entry.getValue();
                if (position.equals(entranceLocation) || position.equals(exitLocation)) {
                    // Set properties directly in Reward without casting
                    reward.isEntrance = position.equals(entranceLocation);
                    reward.isExit = position.equals(exitLocation);
                }
            }
        }
        
        private boolean isCellOccupied(int row, int col) {
            // Check if the cell is already occupied by a reward
            Point cell = new Point(row, col);
            return occupiedCells.contains(cell);
        }
    }

    private void generateNewBoard() {
        boardPanel.clearBoard(); // Clear existing rewards and occupied cells
        boardPanel.generateRandomRewards(); // Generate new rewards
        boardPanel.repaint(); // Repaint the board
    }
    
    private void loadBoardFromFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showOpenDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // User selected a file
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                ObjectInputStream in = new ObjectInputStream(new FileInputStream(filePath));

                // Read the object from the file
                @SuppressWarnings("unchecked")
                List<LoadedReward> loadedRewards = (List<LoadedReward>) in.readObject();
                in.close();

                // Clear existing rewards and occupied cells
                boardPanel.clearBoard();

                // Set the loaded rewards to the board panel
                for (LoadedReward loadedReward : loadedRewards) {
                    String rewardType = loadedReward.getRewardType();
                    int x = loadedReward.getX();
                    int y = loadedReward.getY();
                    AbstractReward.Reward reward = createReward(rewardType, x, y);

                    if (loadedReward.isEntrance()) {
                        new Point(y, x);
                    } else if (loadedReward.isExit()) {
                        new Point(y, x);
                    }

                    if (reward != null) {
                        boardPanel.rewards.put(new Point(y, x), reward);
                        boardPanel.occupiedCells.add(new Point(y, x));
                    } else {
                        System.err.println("Failed to create reward for type: " + rewardType);
                    }
                }

                // Repaint the board
                boardPanel.repaint();

                JOptionPane.showMessageDialog(this, "Board design loaded successfully.");
            } catch (IOException | ClassNotFoundException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error loading board design.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
    
    private Reward createReward(String rewardType, int x, int y) {
        switch (rewardType) {
            case "Coin":
                return new CoinReward().createReward(x, y);
            case "Fruit":
                return new FruitReward().createReward(x, y);
            case "Candy":
                return new CandyReward().createReward(x, y);
            default:
                throw new IllegalArgumentException("Invalid reward type: " + rewardType);
        }
    }

    public static class LoadedReward implements Serializable {
        private static final long serialVersionUID = 1L;
        private String rewardType;
        private int x;
        private int y;
        private boolean isEntrance;
        private boolean isExit;
        private String type;

        // Constructor adapted to use parameters directly
        public LoadedReward(int x, int y, String rewardType, boolean isEntrance, boolean isExit, String type) {
            this.x = x;
            this.y = y;
            this.rewardType = rewardType;
            this.isEntrance = isEntrance;
            this.isExit = isExit;
            this.type = type;
        }
        
        public String getType() {
            return type;
        }

        public String getRewardType() {
            return rewardType;
        }

        public int getX() {
            return x;
        }

        public int getY() {
            return y;
        }

        public boolean isEntrance() {
            return isEntrance;
        }

        public boolean isExit() {
            return isExit;
        }
    }
    
    private void saveBoardToFile() {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(this);

        if (result == JFileChooser.APPROVE_OPTION) {
            // User selected a file
            try {
                String filePath = fileChooser.getSelectedFile().getAbsolutePath();
                List<LoadedReward> loadedRewards = new ArrayList<>();

                // Convert the existing rewards to LoadedReward objects
                for (Map.Entry<Point, AbstractReward.Reward> entry : boardPanel.rewards.entrySet()) {
                    Point position = entry.getKey();
                    AbstractReward.Reward reward = entry.getValue();
                    boolean isEntrance = position.equals(boardPanel.entranceLocation);
                    boolean isExit = position.equals(boardPanel.exitLocation);
                    LoadedReward loadedReward = new LoadedReward(position.x, position.y, reward.getType(), isEntrance, isExit, filePath);
                    loadedRewards.add(loadedReward);
                }

                ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(filePath));
                out.writeObject(loadedRewards); // Save the rewards information
                out.close();
                JOptionPane.showMessageDialog(this, "Board design saved successfully.");
            } catch (IOException ex) {
                ex.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error saving board design.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }
}
